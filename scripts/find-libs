#!/usr/bin/env python3

import sys
import os
import re
import subprocess
import argparse

defaultExclude = [
  r'.*/lib[mc]\.so.*',
  r'.*/libgcc_s\.so.*',
  r'.*/libpthread\.so.*',
  r'.*/libdl\.so.*',
  r'.*/libresolv\.so.*',
  r'.*/libselinux\.so.*',
  r'.*/libcap\.so.*',
]


def combine_exprs(exprs):
  if len(exprs) == 0: return
  return re.compile('((' + ')|('.join(exprs) + '))')


def do_install(path, dest):
  subprocess.run(['install', '-D', path, dest + path])


def find_libs(path, visited, install, includeRE, excludeRE, depth = 0):
  path = os.path.normpath(path)

  if (not (includeRE and includeRE.match(path)) and
      (excludeRE and excludeRE.match(path))): return

  if path in visited: return
  visited.add(path)

  if depth:
    if install: do_install(path, install)
    else: print(path)

  r = subprocess.run(['ldd', path], capture_output = True)

  for line in r.stdout.decode('utf-8').split('\n'):
    parts = line.strip().split()
    if 3 < len(parts) and parts[1] == '=>':
      find_libs(parts[2], visited, install, includeRE, excludeRE, depth + 1)


parser = argparse.ArgumentParser()

parser.add_argument(
  '-I', '--install',
  help = 'Install matching libs to this directory.')
parser.add_argument(
  '-i', '--include', action = 'append', default = [],
  help = 'Include paths matching these regex patterns.')
parser.add_argument(
  '-x', '--exclude', action = 'append', default = defaultExclude,
  help = 'Exclude paths matching these regex patterns.')
parser.add_argument(
  '-r', '--with-root', action = 'store_true', help = 'Install root paths.')
parser.add_argument('paths', nargs = '*', help = 'Paths to check.')

options = parser.parse_args()
includeRE = combine_exprs(options.include)
excludeRE = combine_exprs(options.exclude)

visited = set()
for path in options.paths:
  find_libs(path, visited, options.install, includeRE, excludeRE,
            1 if options.with_root else 0)
