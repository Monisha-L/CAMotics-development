#!/usr/bin/env python3

import sys
import os
import re
import glob
import json
import argparse


def get_build_meta(root, worker, mode, path):
  name      = os.path.basename(path)
  versionRE = r'(?P<version>\d+\.\d+\.\d+)'
  archRE    = r'(?P<arch>[^.]+)'
  extRE     = r'(?P<ext>\.[^-_]+)'
  regex     = r'^[\w_-]+[_-]' + versionRE + r'[-_]' + archRE + extRE + r'$'

  m = re.match(regex, name)
  if not m: raise Exception('Failed to parse package name "%s"' % name)

  return dict(
    package = path[len(root) + 1:],
    worker  = worker,
    mode    = mode,
    version = m.group('version'),
    arch    = m.group('arch'),
    ext     = m.group('ext')
  )


def find_subdirs(path):
  return map(os.path.basename, filter(os.path.isdir, glob.glob(path + '/*')))


def _find_builds(root):
  for worker in find_subdirs(root):
    worker_dir = '%s/%s' % (root, worker)
    if not os.path.isdir(root): continue

    if options.build_modes is not None: modes = options.build_modes.split()
    else: modes = find_subdirs(worker_dir)

    for mode in modes:
      latest = '%s/%s/latest' % (worker_dir, mode)

      if os.path.islink(latest): path = os.path.realpath(latest)
      else: path = '%s/%s' % (worker_dir, mode)

      if os.path.isdir(path):
        for name in os.listdir(path):
          yield get_build_meta(root, worker, mode, path + '/' + name)

      elif os.path.exists(path):
        yield get_build_meta(root, worker, mode, path)


def find_builds(root):
  includeREs = list(map(re.compile, options.include))
  excludeREs = list(map(re.compile, options.exclude))

  def match(row):
    for inc in includeREs:
      if inc.match(row['package']):
        for exc in excludeREs:
          if exc.match(row['package']): return False

        return True

    return False


  return list(filter(match, _find_builds(root)))


# Options
parser = argparse.ArgumentParser()

parser.add_argument(
  '-m', '--modes', default = None, dest = 'build_modes',
  help = 'space separated list of build modes')
parser.add_argument(
  '-i', '--include', action = 'append', default = ['.*'],
  help = 'Include build paths matching these regex patterns')
parser.add_argument(
  '-x', '--exclude', action = 'append', default = ['^$'],
  help = 'Exclude build paths matching these regex patterns')
parser.add_argument(
  'path', help = 'Root path of the builds directory.')


def run():
  global options

  # Parse command line
  options = parser.parse_args()

  json.dump(find_builds(options.path), sys.stdout, indent = 2)


if __name__ == '__main__': run()
